const inquirer = require('inquirer');
const fetch = require("node-fetch");
const fs = require('fs');
const fuzzy = require('fuzzy');
const getIgnores = require("./getIgnores");

inquirer.registerPrompt('autocomplete', require('inquirer-autocomplete-prompt'));

const gitgat = async (args) => {

    console.log('\x1b[36m%s\x1b[0m', '\nðŸ’¥ Welcome to Gitgat. Just give it a moment to start up.\n');  

    let files = await getIgnores()

    const downloadFile = async (url, name) => {
        console.log("\nðŸ”° Downloading .gitignore for " + name)

        let output;
    
        await fetch(url).then(data => data.text()).then((data) => {
            output = data;
        }).catch((error) => console.log(error))
    
        return output
    }


    let requested = [];
    if(args.length == 0){
        const searchIgnores = (answers, input) => {
            input = input || '';
            return new Promise(function(resolve) {
              setTimeout(function() {
                var fuzzyResult = fuzzy.filter(input, Object.keys(files));
                resolve(
                  fuzzyResult.map(function(el) {
                    return el.original;
                  })
                );
              }, 200);
            });
        }
    
        
        let questions = [
            {
                type: 'autocomplete',
                name: 'gitignore',
                suggestOnly: false,
                message: 'What .gitignore do you want to download? Start typing to get suggestions. ',
                source: searchIgnores,
                pageSize: 15
            }, {
                type: 'confirm',
                name: 'more',
                message: 'Do you want to add another .gitignore file?',
                default: false
            }
        ];
          
    
        const getInput = async () => {
            let out;

            await inquirer.prompt(questions).then(answers => {
                console.log(answers.custom)
                requested.push(answers.gitignore)
                out = answers.more
            });
    
            return out
        }
    
        let ask = await getInput().then((res) => {return res})
        
        while(ask){
            ask = await getInput().then((res) => {return res})
        }

    } else{
        let supportedFiles = Object.keys(files).map((e) => e.replace(".gitignore", "").toLowerCase());
        args.map((i) => {
            if(supportedFiles.includes(i)){
                requested.push(i+".gitignore")
            }
        })
    }

    let questions = [
        {
            type: 'confirm',
            name: 'overwrite',
            message: 'Are you sure you want to generate a new .gitignore? This will replace your existing one.',
            default: true
        },
    ]
    
    let getConfirm = true;

    if(!args.includes("--overwrite")){
        getConfirm = await inquirer.prompt(questions).then(answers => {
            return answers.overwrite
        }); 
    }

    if(!getConfirm){
        console.log("\nðŸš¨ Didn't generate new .gitignore.\n")
        return
    }

    let gitIgnoreContent = "# GENERATED BY Gitgat\n\n"; 

    requested = [...new Set(requested)]

    let downloadRequestedFiles = requested.map((item) => {
        return downloadFile(files[item], item.split(".")[0]).then((data) => {
            gitIgnoreContent += `# .gitignore file for ${item.split(".")[0]}\n\n${data}\n\n`
        })
    })

    Promise.all(downloadRequestedFiles).then(() => {
        let path = `${process.cwd()}/.gitignore`;

        fs.writeFile(path, gitIgnoreContent, function(err) {
            if(err) {
                console.log("\n" + err);
            }

            console.log(`\nâœ… Your .gitignore was sucessfully generated on ${path}!\n`);
        }); 
    })

}

module.exports = gitgat;