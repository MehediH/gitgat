const inquirer = require('inquirer');
const fetch = require("node-fetch");
const fs = require('fs');
const fuzzy = require('fuzzy');
const getIgnores = require("./getIgnores");

inquirer.registerPrompt('autocomplete', require('inquirer-autocomplete-prompt'));


const main = async () => {

    console.log('\x1b[36m%s\x1b[0m', 'Welcome to Get Ignore. Just give it a moment to start up.\n');  

    let files = await getIgnores()

    const downloadFile = async (url, name) => {
        console.log("\nDownloading .gitignore for " + name)

        let output;
    
        await fetch(url).then(data => data.text()).then((data) => {
            output = data;
        }).catch((error) => console.log(error))
    
        return output
    }


    const searchIgnores = (answers, input) => {
        input = input || '';
        return new Promise(function(resolve) {
          setTimeout(function() {
            var fuzzyResult = fuzzy.filter(input, Object.keys(files));
            resolve(
              fuzzyResult.map(function(el) {
                return el.original;
              })
            );
          }, 200);
        });
    }
    
    let questions = [
        {
            type: 'autocomplete',
            name: 'gitignore',
            suggestOnly: false,
            message: 'What .gitignore do you want to download? Start typing to autocomplete. ',
            source: searchIgnores,
            pageSize: 15
        }, {
            type: 'confirm',
            name: 'more',
            message: 'Do you want to add contents of another .gitignore?',
            default: false
        },
    ];
      
    let requested = [];

    const getInput = async () => {
        let out;

        await inquirer.prompt(questions).then(answers => {
            requested.push(answers.gitignore)
            out = answers.more
        });

        return out
    }

    let ask = await getInput().then((res) => {return res})
    
    while(ask){
        console.log("\n")
        ask = await getInput().then((res) => {return res})
    }

    let gitIgnoreContent = "# GENERATED BY GET IGNORE\n\n"; 

    let downloadRequestedFiles = requested.map((item) => {
        return downloadFile(files[item], item.split(".")[0]).then((data) => {
            gitIgnoreContent += `# GET IGNORE file for ${item.split(".")[0]}\n\n${data}\n\n`
        })
    })

    Promise.all(downloadRequestedFiles).then(() => {
        let path = `${process.cwd()}/.gitignore`;

        fs.writeFile(path, gitIgnoreContent, function(err) {
            if(err) {
                console.log("\n" + err);
            }

            console.log(`\nYour .gitignore was sucessfully generated on ${path}!`);
        }); 
    })

}

main()